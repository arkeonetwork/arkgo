---
configs:
  secret:
  #This is bcrypt hashed `htpasswd -nbBC 10 "" $ARKEO | tr -d ':\n' | sed 's/$2y/$2a/'`
    argocdServerAdminPassword: ""
notifications:
  argocdURL: ""
  secret:
    items:
      discord-url: ""
  logFormat: "json"
  logLevel: "info"
  extraEnv:
    - name: TZ
      value: Africa/Lagos
  notifiers: 
    service.webhook.discord-webhook: |
      url: $discord-url
      headers:
      - name: Content-Type
        value: application/json
  subscriptions:
    - recipients:
      - discord-webhook
      triggers:
      - on-sync-succeeded
      - on-health-degraded
      - on-sync-failed
      - on-deployed
  templates:
    template.app-deployed: |
      webhook:
        discord-webhook:
          method: POST
          body: |
            {
              "embeds": [{
                "title": "ArgoCD Notification: App deployed",
                "description": "**App:** {{.app.metadata.name}}\n**Status:** {{.app.status.sync.status}}\n**OPERATION PHASE:** {{.app.status.operationState.phase}}\n**HEALTH:** {{.app.status.health.status}}\n**APP DETAILS:** {{.context.argocdUrl}}/applications/{{.app.metadata.name}}\n**FINISHED AT:** {{ (call .time.Parse .app.status.operationState.startedAt).Local.Format "2006-01-02T15:04:05Z07:00" }}",
                "color": "5763719"
              }]
            }
    template.app-health-degraded: |
      webhook:
        discord-webhook:
          method: POST
          body: |
            {
              "embeds": [{
                "title": "ArgoCD Notification: App Health Degraded",
                "description": "**App:** {{.app.metadata.name}}\n**Status:** {{.app.status.sync.status}}\n**OPERATION PHASE:** {{.app.status.operationState.phase}}\n**HEALTH:** {{.app.status.health.status}}\n**APP DETAILS:** {{.context.argocdUrl}}/applications/{{.app.metadata.name}}\n**FINISHED AT:** {{ (call .time.Parse .app.status.operationState.startedAt).Local.Format "2006-01-02T15:04:05Z07:00" }}",
                "color": "11342935"
              }]
            }
    template.app-sync-failed: |
      webhook:
        discord-webhook:
          method: POST
          body: |
            {
              "embeds": [{
                "title": "ArgoCD Notification: App Sync Failed",
                "description": "**App:** {{.app.metadata.name}}\n**Status:** {{.app.status.sync.status}}\n**OPERATION PHASE:** {{.app.status.operationState.phase}}\n**HEALTH:** {{.app.status.health.status}}\n**APP DETAILS:** {{.context.argocdUrl}}/applications/{{.app.metadata.name}}\n**ERROR MESSAGE:** {{.app.status.operationState.message}}\n**FINISHED AT:** {{ (call .time.Parse .app.status.operationState.startedAt).Local.Format "2006-01-02T15:04:05Z07:00" }}",
                "color": "15548997"
              }]
            }
    template.app-sync-succeeded: |
      webhook:
        discord-webhook:
          method: POST
          body: |
            {
              "embeds": [{
                "title": "ArgoCD Notification: App Sync Succeeded",
                "description": "**App:** {{.app.metadata.name}}\n**Status:** {{.app.status.sync.status}}\n**OPERATION PHASE:** {{.app.status.operationState.phase}}\n**HEALTH:** {{.app.status.health.status}}\n**APP DETAILS:** {{.context.argocdUrl}}/applications/{{.app.metadata.name}}\n**FINISHED AT:** {{ (call .time.Parse .app.status.operationState.startedAt).Local.Format "2006-01-02T15:04:05Z07:00" }}",
                "color": "5763719"
              }]
            }
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
